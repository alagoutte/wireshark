From f3fdd400c2a255ab909c5e5d963a2383aab44f6e Mon Sep 17 00:00:00 2001
From: Alexis La Goutte <alexis.lagoutte@gmail.com>
Date: Thu, 27 Nov 2014 19:13:23 +0100
Subject: [PATCH 07/14] lemon fix -Wmissing-prototypes

---
 tools/lemon/lemon.c | 28 ++++++++++++++--------------
 1 file changed, 14 insertions(+), 14 deletions(-)

diff --git a/tools/lemon/lemon.c b/tools/lemon/lemon.c
index 9285d92..f8445f2 100644
--- a/tools/lemon/lemon.c
+++ b/tools/lemon/lemon.c
@@ -34,8 +34,8 @@ extern int access(const char *path, int mode);
 #include <unistd.h>
 #endif
 
-/* #define PRIVATE static */
-#define PRIVATE
+#define PRIVATE static
+/* #define PRIVATE */
 
 #ifdef TEST
 #define MAXRHS 5       /* Set low to exercise exception code */
@@ -504,7 +504,7 @@ static struct action *Action_sort(
   return ap;
 }
 
-void Action_add(
+PRIVATE void Action_add(
   struct action **app,
   enum e_action type,
   struct symbol *sp,
@@ -575,14 +575,14 @@ struct acttab {
 #define acttab_yylookahead(X,N)  ((X)->aAction[N].lookahead)
 
 /* Free all memory associated with the given acttab */
-void acttab_free(acttab *p){
+PRIVATE void acttab_free(acttab *p){
   free( p->aAction );
   free( p->aLookahead );
   free( p );
 }
 
 /* Allocate a new acttab structure */
-acttab *acttab_alloc(void){
+PRIVATE acttab *acttab_alloc(void){
   acttab *p = (acttab *) calloc( 1, sizeof(*p) );
   if( p==0 ){
     fprintf(stderr,"Unable to allocate memory for a new acttab.");
@@ -597,7 +597,7 @@ acttab *acttab_alloc(void){
 ** This routine is called once for each lookahead for a particular
 ** state.
 */
-void acttab_action(acttab *p, int lookahead, int action){
+PRIVATE void acttab_action(acttab *p, int lookahead, int action){
   if( p->nLookahead>=p->nLookaheadAlloc ){
     p->nLookaheadAlloc += 25;
     p->aLookahead = (struct lookahead_action *) realloc( p->aLookahead,
@@ -630,7 +630,7 @@ void acttab_action(acttab *p, int lookahead, int action){
 **
 ** Return the offset into the action table of the new transaction.
 */
-int acttab_insert(acttab *p){
+PRIVATE int acttab_insert(acttab *p){
   int i, j, k, n;
   assert( p->nLookahead>0 );
 
@@ -935,7 +935,7 @@ PRIVATE struct state *getstate(struct lemon *lemp)
 /*
 ** Return true if two symbols are the same.
 */
-int same_symbol(struct symbol *a, struct symbol *b)
+PRIVATE int same_symbol(struct symbol *a, struct symbol *b)
 {
   int i;
   if( a==b ) return 1;
@@ -1724,7 +1724,7 @@ static char *merge(
 **   The "next" pointers for elements in list are changed.
 */
 #define LISTSIZE 30
-static char *msort(
+PRIVATE char *msort(
   char *list,
   char **next,
   int (*cmp)(const char*,const char*)
@@ -2942,7 +2942,7 @@ void Reprint(struct lemon *lemp)
   }
 }
 
-void ConfigPrint(FILE *fp, struct config *cfp)
+PRIVATE void ConfigPrint(FILE *fp, struct config *cfp)
 {
   struct rule *rp;
   struct symbol *sp;
@@ -3003,7 +3003,7 @@ char *tag;
 /* Print an action to the given file descriptor.  Return FALSE if
 ** nothing was actually printed.
 */
-int PrintAction(struct action *ap, FILE *fp, int indent){
+PRIVATE int PrintAction(struct action *ap, FILE *fp, int indent){
   int result = 1;
   switch( ap->type ){
     case SHIFT:
@@ -3301,7 +3301,7 @@ PRIVATE void tplt_print(FILE *out, struct lemon *lemp, char *str, int *lineno)
 ** The following routine emits code for the destructor for the
 ** symbol sp
 */
-void emit_destructor_code(
+PRIVATE void emit_destructor_code(
   FILE *out,
   struct symbol *sp,
   struct lemon *lemp,
@@ -3344,7 +3344,7 @@ void emit_destructor_code(
 /*
 ** Return TRUE (non-zero) if the given symbol has a destructor.
 */
-int has_destructor(struct symbol *sp, struct lemon *lemp)
+PRIVATE int has_destructor(struct symbol *sp, struct lemon *lemp)
 {
   int ret;
   if( sp->type==TERMINAL ){
@@ -3532,7 +3532,7 @@ PRIVATE void emit_code(
 ** union, also set the ".dtnum" field of every terminal and nonterminal
 ** symbol.
 */
-void print_stack_union(
+PRIVATE void print_stack_union(
   FILE *out,                  /* The output stream */
   struct lemon *lemp,         /* The main info structure for this parser */
   int *plineno,               /* Pointer to the line number */
-- 
1.9.1

